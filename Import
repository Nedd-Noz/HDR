import cv2
import torch
import numpy as np
from torchvision.transforms.functional import to_tensor, to_pil_image
from PIL import Image

# Model SRCNN
class SRCNN(torch.nn.Module):
    def __init__(self):
        super(SRCNN, self).__init__()
        self.conv1 = torch.nn.Conv2d(1, 64, kernel_size=9, padding=4)
        self.conv2 = torch.nn.Conv2d(64, 32, kernel_size=5, padding=2)
        self.conv3 = torch.nn.Conv2d(32, 1, kernel_size=5, padding=2)
        self.relu = torch.nn.ReLU()

    def forward(self, x):
        x = self.relu(self.conv1(x))
        x = self.relu(self.conv2(x))
        x = self.conv3(x)
        return x

# Load gambar
def load_image(image_path):
    image = Image.open(image_path).convert('YCbCr')
    y, cb, cr = image.split()
    return y, cb, cr

# Proses SRCNN
def upscale_image(y, model):
    y_tensor = to_tensor(y).unsqueeze(0)
    with torch.no_grad():
        output = model(y_tensor)
    output = output.squeeze(0).clamp(0.0, 1.0)
    return to_pil_image(output)

# Fungsi utama untuk meningkatkan resolusi gambar
def enhance_image(image_path, output_path):
    # Muat model SRCNN
    model = SRCNN()
    model.load_state_dict(torch.load('srcnn.pth'))
    model.eval()

    # Proses gambar
    y, cb, cr = load_image(image_path)
    y_enhanced = upscale_image(y, model)

    # Gabungkan kembali channel
    result = Image.merge('YCbCr', [y_enhanced, cb, cr]).convert('RGB')
    result.save(output_path)
    print("Gambar berhasil di-upscale dan disimpan di:", output_path)

# Penggunaan fungsi
enhance_image('input.jpg', 'output_hd.jpg')
